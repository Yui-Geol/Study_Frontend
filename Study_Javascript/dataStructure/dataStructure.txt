자료구조: 자료들을 정리하여 보관하는 구조

알고리즘: 문제를 해결하는 절차, 특정한 일을 수행하는 명령어들의 집합
1.문제를 해결할 수 있는 절차를 고안
2.컴퓨터가 수행하여야 할 단계적인 절차를 자세히 기술

알고리즘 정의: 입력 > 0, 출력 > 1, 명백성, 유한성, 유효성, 효율성

알고리즘을 기술하는 4가지 방법
1. 자연어
2. 흐름도(flowchart)
3. 의사코드(pseudo-code)
4. 프로그래밍 언어

추상화: 어떤 시스템의 간략화된 기술 또는 명세로서 시스템의 정말 핵심적인 구조나 동작에만 집중하는 것
-> 좋은 추상화는 사용자에게 중요한 정보는 강조되고 반면 중요하지 않은 구현 세부사항은 제거되는 것
-> 정보은닉(information hiding) -> 추상 자료형(abstract data type, ADT)

ADT 사용자는 구현세부사항이 아닌 인터페이스만 사용하기 때문에 추상 자료형의 구현 방법은 언제든지 안전하게 변경될 수 있다

TV와 ADT 비교
1.TV 인터페이스가 제공하는 특정 일만 가능 -> ADT가 제공하는 연산만 사용 가능
2.TV 사용법을 알아야한다 -> ADT가 제공하는 연산들을 사용하는 방법을 알아야한다
3.사용자는 TV 내부를 볼 수 없다 -> 사용자들은 ADT 내부 데이터에 접근할 수 없다
4.TV 내부에 일어나는 일을 몰라도 사용할 수 있다 -> 사용자들은 ADT가 어떻게 구현되는지 몰라도 사용할 수 있다
5.TV 내부의 기계장치를 바꾸더라도 인터페이스가 바뀌지 않는한 그대로 사용가능 
-> 다른 사람이 ADT의 구현을 변경하더라도 인터페이스가 변경되지 않으면 여전히 같은 방식으로 ADT 사용가능

효율적인 알고리즘: 결과가 나올 때까지의 수행시간이 짧으면서 컴퓨터 내에 있는 메모리와 같은 자원을 덜 사용하는 알고리즘

시간을 알고리즘 측정방법에 사용하지 않는 이유
1. 구현이 복잡할 수 있음
2. 컴퓨터에 따라 실행 속도가 다름
3. 데이터에 따라 속도가 다르게 나올 수 있음
-> 알고리즘 복잡도 분석 방법으로 분석

알고리즘 분석에 사용하는 2가지 측면
1. 시간 복잡도(time complexity): 알고리즘의 수행속도 분석. 수행시간이 아니라 알고리즘이 이루고 있는
								 연산의 개수를 실행
2. 공간 복잡도(space complexity): 알고리즘의 기억데이터 분석

빅오 표기법: 알고리즘의 상한을 표기, 상한이 여러개 존재할 수 있음 
입력 개수 N과 시간복잡도 함수 T(n)에 대하여 계수를 제외한 최고차항만 남긴다
※logN도 차수이다

차수의 크기 비교
O(1) < O(logN) < O(N) < O(NlogN) < O(N**2) < O(2**N) < O(N!) 

빅오메가: 어떤 함수의 하한을 표시하는 방법

빅세타: 동일한 함수로 상한과 하한을 만들수 있을 때 사용

최악, 평균, 최선의 경우
- 보통 최악의 경우를 알고리즘의 시간 복잡도의 척도로 많이 쓰인다
