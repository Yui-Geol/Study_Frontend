/** @license num-to-korean v0.5.2
* https://github.com/huskyhoochu/num-to-korean
* (c) 2020-2022 Seung Hyung Soo
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

// 한글로 바꿀 숫자 배열
var textSymbol = ['', '일', '이', '삼', '사', '오', '육', '칠', '팔', '구'];
// 4자리마다 반복되는 자릿수 배열
var powerSymbol = ['', '십', '백', '천'];
// 4자리마다 커지는 단위수 배열
var dotSymbol = ['', '만', '억', '조', '경'];

function splitEvery(n, arr) {
    var result = [];
    var index = 0;
    while (index < arr.length) {
        result.push(arr.slice(index, (index += n)));
    }
    return result;
}
function dropLastWhile(pred, arr) {
    var index = arr.length - 1;
    while (index >= 0 && pred(arr[index])) {
        index -= 1;
    }
    return arr.slice(0, index + 1);
}

var FormatOptions = {
    NORMAL: 'normal',
    SPACING: 'spacing',
    MIXED: 'mixed',
    LINGUAL: 'lingual',
    LINGUAL_SPACING: 'lingual_spacing', // 구어체 띄어쓰기
};
var NumToKorean = /** @class */ (function () {
    function NumToKorean(num, formatOption) {
        this.originNum = 0;
        this.formatOption = 'normal';
        this.token = [];
        this.result = [];
        this.originNum = NumToKorean.isInteger(num) ? num : 0;
        this.formatOption = formatOption;
    }
    NumToKorean.isInteger = function (num) {
        // eslint-disable-next-line no-restricted-globals
        return isFinite(num) && Math.floor(num) === num;
    };
    NumToKorean.prototype.getToken = function () {
        this.token = this.originNum
            .toString()
            .split('')
            .map(function (numText) { return parseInt(numText, 10); })
            .reverse()
            .map(function (num, index) {
            var powerIndex = index % 4;
            var dotIndex = Math.ceil(index / 4);
            var power = num === 0 ? '' : powerSymbol[powerIndex];
            var dot = powerIndex === 0 ? dotSymbol[dotIndex] : '';
            return {
                num: num,
                power: power,
                dot: dot,
            };
        });
        return this;
    };
    NumToKorean.prototype.flatToken = function (isMixed) {
        this.result = this.token.map(function (item) {
            if (isMixed) {
                return "".concat(item.num).concat(item.dot);
            }
            var numToText = textSymbol[item.num] || '';
            return "".concat(numToText).concat(item.power).concat(item.dot);
        });
        return this;
    };
    NumToKorean.prototype.reverseTokenDropZero = function () {
        this.result = splitEvery(4, this.result)
            .map(function (item) {
            var droppedZero = dropLastWhile(function (x) { return parseInt(x, 10) === 0; }, item);
            if (droppedZero.length === 4) {
                droppedZero.splice(3, 0, ',');
            }
            return droppedZero;
        })
            .reduce(function (acc, val) { return acc.concat(val); }, [])
            .reverse();
        return this;
    };
    NumToKorean.prototype.reverseToken = function () {
        this.result = splitEvery(4, this.result)
            .map(function (item) {
            return dotSymbol.indexOf(item.join('')) > 0 ? ['', '', '', ''] : item;
        })
            .reduce(function (acc, val) { return acc.concat(val); }, [])
            .reverse();
        return this;
    };
    NumToKorean.prototype.addSpacing = function () {
        this.result = this.result
            .filter(function (token) { return token; })
            .map(function (token) {
            if (dotSymbol.indexOf(token.slice(-1)) > 0) {
                return "".concat(token, " ");
            }
            return token;
        });
        return this;
    };
    NumToKorean.prototype.removeOneStr = function () {
        if (this.result.length === 1) {
            return this;
        }
        var filtered = [];
        for (var i = 0; i < this.result.length; i += 1) {
            // 일의자리의 "일"은 생략되어선 안 된다
            if (i === this.result.length - 1) {
                filtered.push(this.result[i]);
                break;
            }
            // 십만자리 이상일 때 만, 억, 조 단위의 "일"은 생략되어선 안 된다
            // 다만 만의자리일 때 만의자리의 "일"은 생략되어야 한다
            if (this.result.length > 5 &&
                dotSymbol.indexOf(this.result[i].slice(1)) > 0) {
                filtered.push(this.result[i]);
                // eslint-disable-next-line no-continue
                continue;
            }
            // 그 외의 "일"은 생략된다
            if (this.result[i].slice(0, 1) === textSymbol[1]) {
                filtered.push(this.result[i].slice(1));
            }
            else {
                filtered.push(this.result[i]);
            }
        }
        this.result = filtered;
        return this;
    };
    NumToKorean.prototype.makeZeroIfResultEmpty = function () {
        if ((this.result.length === 1 && this.result[0] === '') ||
            this.result.length === 0) {
            this.result = ['0'];
        }
        return this;
    };
    NumToKorean.prototype.getResult = function () {
        return this.result;
    };
    NumToKorean.prototype.getNormal = function () {
        return this.getToken().flatToken(false).reverseToken().getResult().join('');
    };
    NumToKorean.prototype.getLingual = function () {
        return this.getToken()
            .flatToken(false)
            .reverseToken()
            .removeOneStr()
            .getResult()
            .join('');
    };
    NumToKorean.prototype.getSpacing = function () {
        return this.getToken()
            .flatToken(false)
            .reverseToken()
            .addSpacing()
            .getResult()
            .join('')
            .trim();
    };
    NumToKorean.prototype.getLingualSpacing = function () {
        return this.getToken()
            .flatToken(false)
            .reverseToken()
            .removeOneStr()
            .addSpacing()
            .getResult()
            .join('')
            .trim();
    };
    NumToKorean.prototype.getMixed = function () {
        return this.getToken()
            .flatToken(true)
            .reverseTokenDropZero()
            .addSpacing()
            .makeZeroIfResultEmpty()
            .getResult()
            .join('')
            .trim();
    };
    NumToKorean.prototype.getKorean = function () {
        if (this.formatOption === FormatOptions.SPACING) {
            return this.getSpacing();
        }
        if (this.formatOption === FormatOptions.MIXED) {
            return this.getMixed();
        }
        if (this.formatOption === FormatOptions.LINGUAL) {
            return this.getLingual();
        }
        if (this.formatOption === FormatOptions.LINGUAL_SPACING) {
            return this.getLingualSpacing();
        }
        if (this.formatOption === FormatOptions.NORMAL) {
            return this.getNormal();
        }
        return this.getNormal();
    };
    return NumToKorean;
}());
/**
 * Converts a number to Korean notation.
 * @param num A number to convert into Korean notation.
 * @param formatOptions A string to select a format.
 */
function numToKorean(num, formatOptions) {
    var k = new NumToKorean(num, formatOptions || FormatOptions.NORMAL);
    return k.getKorean();
}

exports.FormatOptions = FormatOptions;
exports.numToKorean = numToKorean;
